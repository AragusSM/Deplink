output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$plot_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$plot_brush)
})
output$plot_clickedpoints <- renderTable({
# For base graphics, we need to specify columns, though for ggplot2,
# it's usually not necessary.
res <- nearPoints(data(), input$plot_click, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
output$plot_brushedpoints <- renderTable({
res <- brushedPoints(data(), input$plot_brush, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
}
)
# Demo of clicking, hovering, brushing with imageOutput
# Note that coordinates are in pixels
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderImage({
input$newimage
# Get width and height of image output
width  <- session$clientData$output_image_width
height <- session$clientData$output_image_height
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
png(outfile, width=width, height=height)
plot(rnorm(200), rnorm(200))
dev.off()
# Return a list containing information about the image
list(
src = outfile,
contentType = "image/png",
width = width,
height = height,
alt = "This is alternate text"
)
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
}
library(shiny)
library(plotly)
ui <- fluidPage(
htmltools::htmlDependencies(icon("")),
tags$style(
'
.plot-zoom {
position: absolute;
border: none;
background-color: transparent;
bottom: 0;
right: 0;
}
.full-screen {
position: fixed;
height: 98vh !important;
width: 98vw !important;
left: 0;
top: 0;
z-index: 9999;
overflow: hidden;
}
'
),
div(
class = "plotly-full-screen",
column(6, plotlyOutput("p2")),
column(6, plotlyOutput("p1")),
),
tags$script(HTML(
"
function plotZoom(el){
el = $(el);
var parent = el.parent().parent();
if(el.attr('data-full_screen') === 'false') {
parent.addClass('full-screen').trigger('resize').fadeOut().fadeIn();
el.attr('data-full_screen', 'true');
} else {
parent.removeClass('full-screen').trigger('resize').fadeOut().fadeIn();
el.attr('data-full_screen', 'false');
}
}
$(function(){
$('.plotly-full-screen  .plotly.html-widget').append(
`
<div style='position: relative;'>
<button onclick=plotZoom(this) class='plot-zoom' data-full_screen='false' title='Full screen'>
<i class='fa fa-expand-arrows-alt'></i>
</button>
</div>
`);
})
"
))
)
server <- function(input, output, session) {
output$p1 <- output$p2 <- renderPlotly(plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length))
}
shinyApp(ui, server)
rm(list = ls())
library(shiny)
library(shinyBS)
shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(numericInput("n", "n", 50),actionButton("go", "Go")),
mainPanel(
bsModal("modalExample", "Your plot", "go", size = "large",plotOutput("plot"),downloadButton('downloadPlot', 'Download'))
)
)
),
server =
function(input, output, session) {
randomVals <- eventReactive(input$go, {
runif(input$n)
})
plotInput <- function(){hist(randomVals())}
output$plot <- renderPlot({
hist(randomVals())
})
output$downloadPlot <- downloadHandler(
filename = "Shinyplot.png",
content = function(file) {
png(file)
plotInput()
dev.off()
})
}
)
library(ggplot2)
library(Cairo)   # For nicer ggplot2 output when deployed on Linux
ui <- fluidPage(
fluidRow(
column(width = 12,
plotOutput("plot1", height = 350,hover = hoverOpts(id ="plot_hover"))
)
),
fluidRow(
column(width = 5,
verbatimTextOutput("hover_info")
)
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
ggplot(mtcars, aes(x=mpg,y=disp,color=factor(cyl))) + geom_point()
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist=sqrt((hover$x-mtcars$mpg)^2+(hover$y-mtcars$disp)^2)
cat("Weight (lb/1000)\n")
if(min(dist) < 3)
mtcars$wt[which.min(dist)]
}
})
}
shinyApp(ui, server)
library(ggplot2)
library(Cairo)   # For nicer ggplot2 output when deployed on Linux
ui <- fluidPage(
fluidRow(
column(width = 12,
plotOutput("plot1", height = 350,hover = hoverOpts(id ="plot_hover"))
)
),
fluidRow(
column(width = 5,
verbatimTextOutput("hover_info")
)
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
ggplot(mtcars, aes(x=mpg,y=disp,color=factor(cyl))) + geom_point()
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist=sqrt((hover$x-mtcars$mpg)^2+(hover$y-mtcars$disp)^2)
cat("Weight (lb/1000)\n")
if(min(dist) < 3)
mtcars$wt[which.min(dist)]
}
})
}
shinyApp(ui, server)
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist=sqrt((hover$x-mtcars$mpg)^2+(hover$y-mtcars$disp)^2)
cat("Weight (lb/1000)\n")
if(min(dist) < 3)
mtcars$wt[which.min(dist)]
}
})
server <- function(input, output) {
output$plot1 <- renderPlot({
ggplot(mtcars, aes(x=mpg,y=disp,color=factor(cyl))) + geom_point()
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist=sqrt((hover$x-mtcars$mpg)^2+(hover$y-mtcars$disp)^2)
cat("Weight (lb/1000)\n")
if(min(dist) < 3)
mtcars$wt[which.min(dist)]
}
})
}
library(ggplot2)
library(Cairo)   # For nicer ggplot2 output when deployed on Linux
ui <- fluidPage(
fluidRow(
column(width = 12,
plotOutput("plot1", height = 350,hover = hoverOpts(id ="plot_hover"))
)
),
fluidRow(
column(width = 5,
verbatimTextOutput("hover_info")
)
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
ggplot(mtcars, aes(x=mpg,y=disp,color=factor(cyl))) + geom_point()
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist=sqrt((hover$x-mtcars$mpg)^2+(hover$y-mtcars$disp)^2)
cat("Weight (lb/1000)\n")
if(min(dist) < 3)
mtcars$wt[which.min(dist)]
}
})
}
shinyApp(ui, server)
f (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
choiceNames =
list(icon("calendar"), icon("bed"),
icon("cog"), icon("bug")),
choiceValues =
list("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
choiceNames =
list(icon("calendar"), icon("bed"),
icon("cog"), icon("bug")),
choiceValues =
list("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons)
})
}
shinyApp(ui, server)
}
library(shiny)
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
choiceNames =
list(icon("calendar"), icon("bed"),
icon("cog"), icon("bug")),
choiceValues =
list("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons)
})
}
shinyApp(ui, server)
}
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
choiceNames =
list(icon("calendar"), icon("bed"),
icon("cog"), icon("bug")),
choiceValues =
list("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons)
})
}
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
choiceNames =
list(icon("calendar"), icon("bed"),
icon("cog"), icon("bug")),
choiceValues =
list("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons)
})
}
shinyApp(ui, server)
library(data.table)
library(stringr)
library(plotly)
library(tidyr)
library(dplyr)
library(sqldf)
setwd("~/Desktop/DepLink/function/")
data = readRDS("DepMap_21Q3/rds_data/CRISPR_gene_effect.rds")
data = readRDS("../DepMap_21Q3/CRISPR_gene_effect.rds")
data = readRDS("../data/DepMap_21Q3/CRISPR_gene_effect.rds")
data = readRDS("../data/DepMap_21Q3/g-gcorr_CRISPR_gene_effect_pearson.rds")
data = readRDS("../data/DepMap_21Q3/CRISPR_gene_effect.rds")
View(data)
substr(data[1,1],1,4)
substr(data[1,1],1,5)
substr(data[1,1],1,1)
substr(data[1,5],1,1)
substr(data[1,6],1,4)
data.1 = matrix(data = NA, nrow = nrow(data), ncol = ncol(data))
colnames(data.1) <- colnames(data)
rownames(data.1) <- rownames(data)
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (substr(data[j,i],1,1) == "-") {
data.1[j,i] <- substr(data[j,i],1,5)
}else{
data.1[j,i] <- substr(data[j,i],1,4)
}
}
}
#3.Scatter plots: gene vs. gene
source("plot_scatter.R")
load("../data/DepMap_21Q3/CRISPR_gene_effect_round.RData")
# data = as.data.frame(t(as.matrix(data)))
# data = as.data.frame(sapply(data, as.numeric))
DepLink_Gene_ScatterPlot(data = as.data.frame(t(crispr), stringsAsFactors =F),
x = "A1CF",y = "A4GALT")
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (substr(data[j,i],1,1) == "-") {
data.1[j,i] <- substr(data[j,i],1,5)
}else{
data.1[j,i] <- substr(data[j,i],1,4)
}
}
cat("Col: ", j, "/ Row: ", i)
}
cat("Col: ", j, "/ Row: ", i, "\n")
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (substr(data[j,i],1,1) == "-") {
data.1[j,i] <- substr(data[j,i],1,5)
}else{
data.1[j,i] <- substr(data[j,i],1,4)
}
}
cat("Col: ", j, "/ Row: ", i, "\n")
}
save(data.1, file = "../data/DepMap_21Q3/CRISPR_gene_effect_round_chr.RData")
load("../data/DepMap_21Q3/CRISPR_gene_effect_round_chr.RData")
load("../data/DepMap_21Q3/CRISPR_gene_effect_round.RData")
class(crispr$`ACH-000001`)
class(data.1[,1])
save(crispr,file = "../data/DepMap_21Q3/CRISPR_gene_effect_gzip6.RData",compress = T,compression_level = 6)
save(crispr,file = "../data/DepMap_21Q3/CRISPR_gene_effect_gzip9.RData",compress = T,compression_level = 9)
load("../data/DepMap_21Q3/CRISPR_gene_effect_gzip9.RData")
crispr.comp <- crispr
load("../data/DepMap_21Q3/CRISPR_gene_effect_round.RData")
a <- crispr - crispr.comp
a <- abs(crispr) - abs(crispr.comp)
sum(a)
crispr[1,1]
crispr.comp[1,1]
sum(is.na(crispr))
a <- abs(crispr - crispr.comp)
range(a)
sum(a[!is.na(a)])
load("../data/DepMap_21Q3/CRISPR_gene_effect_round_chr.RData")
save(data.1,file = "../data/DepMap_21Q3/CRISPR_gene_effect_gzip9chr.RData",compress = T,compression_level = 9)
Sys.time()
start_time <- Sys.time()
load("../data/DepMap_21Q3/CRISPR_gene_effect_gzip9chr.RData")
end_time <- Sys.time()
print(end_time -start_time )
save(data.1,file = "../data/DepMap_21Q3/CRISPR_gene_effect_gzip9chr.RData",compress = "bzip2",compression_level = 9)
save(data.1,file = "../data/DepMap_21Q3/CRISPR_gene_effect_gzip9chr_xz.RData",compress = "xz",compression_level = 9)
load("../data/DepMap_21Q3/CRISPR_gene_effect_round.RData")
save(crispr,file = "../data/DepMap_21Q3/CRISPR_gene_effect_gzip9_xz.RData",compress = "xz",compression_level = 9)
save(crispr,file = "../data/DepMap_21Q3/CRISPR_gene_effect_gzip9_bzip2.RData",compress = "bzip2",compression_level = 9)
start_time <- Sys.time()
load("../data/DepMap_21Q3/CRISPR_gene_effect_gzip9_xz.RData")
end_time <- Sys.time()
print(end_time -start_time )
start_time <- Sys.time()
load("../data/DepMap_21Q3/CRISPR_gene_effect_gzip9chr.RData")
end_time <- Sys.time()
print(end_time -start_time )
