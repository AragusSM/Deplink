alt = "This is alternate text")
}, deleteFile = TRUE)
# Send a pre-rendered image, and don't delete the image after sending it
# NOTE: For this example to work, it would require files in a subdirectory
# named images/
output$plot3 <- renderImage({
# When input$n is 1, filename is ./images/image1.jpeg
filename <- normalizePath(file.path('./images',
paste('image', input$n, '.jpeg', sep='')))
# Return a list containing the filename
list(src = filename)
}, deleteFile = FALSE)
}
shinyApp(ui, server)
}
plot(c(0, 2), c(0, 4), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste("Please select one drug
from the table"),
cex = 1, col = "black")
text(x = 0.5, y = 0.5, paste("Please select one drug from the table"),
cex = 1, col = "black")
plot(c(0, 4), c(0, 4), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste("Please select one drug from the table"),
cex = 1, col = "black")
plot(c(0, 4), c(0, 4), ann = F,
# bty = 'n',
type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste("Please select one drug from the table"),
cex = 1, col = "black")
text(x = 1, y = 0.5, paste("Please select one drug from the table"),
cex = 1, col = "black")
text(x = 1, y = 2, paste("Please select one drug from the table"),
cex = 1, col = "black")
text(x = 2, y = 2, paste("Please select one drug from the table"),
cex = 1, col = "black")
plot(c(0, 4), c(0, 4), ann = F,
# bty = 'n',
type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 2, y = 2, paste("Please select one drug from the table"),
cex = 1, col = "black")
plot(c(0, 4), c(0, 4), ann = F,
# bty = 'n',
type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 2, y = 2, paste("Please select one drug from the table below"),
cex = 1, col = "black")
library(shiny); runApp('Desktop/DepLink/function/Tab2.R')
runApp('Desktop/DepLink/function/Tab2.R')
runApp('Desktop/DepLink/function/Tab2.R')
shiny::runApp('Desktop/test_folder')
library(shiny)
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
library(shinyWidgets)
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
runApp('Box/ChenLab_Bioinformatics/COVID19_NGS_Pathology/COVID19_Shiny_LJW')
library(:png)
library("png"
)
# read a sample file (R logo)
img <- readPNG(system.file("img", "Rlogo.png", package="png"))
# read it also in native format
img.n <- readPNG(system.file("img", "Rlogo.png", package="png"), TRUE)
# if your R supports it, we'll plot it
if (exists("rasterImage")) { # can plot only in R 2.11.0 and higher
plot(1:2, type='n')
if (names(dev.cur()) == "windows") {
# windows device doesn't support semi-transparency so we'll need
# to flatten the image
transparent <- img[,,4] == 0
img <- as.raster(img[,,1:3])
img[transparent] <- NA
# interpolate must be FALSE on Windows, otherwise R will
# try to interpolate transparency and fail
rasterImage(img, 1.2, 1.27, 1.8, 1.73, interpolate=FALSE)
} else {
# any reasonable device will be fine using alpha
rasterImage(img, 1.2, 1.27, 1.8, 1.73)
rasterImage(img.n, 1.5, 1.5, 1.9, 1.8)
}
}
img
dev.cur()
names(dev.cur())
img[,,4]
exists(img)
is.finite("img")
is.null("img")
is.null("idx")
is.finite(img)
is.finite(idx)
exists("img")
exists("idx")
ui <- fluidPage(
titlePanel(tagList(
img(src = "nhl-logo.png", height = 60, width = 60),
span("PLAY-BY-PLAY",
span(actionButton('load_inputs', 'Load inputs'),
actionButton('save_inputs', 'Save inputs'),
style = "position:absolute;right:2em;")
)
),
windowTitle = "NHL Play-by-Play"
),
hr(),
fluidRow()
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel(tagList(
img(src = "nhl-logo.png", height = 60, width = 60),
span("PLAY-BY-PLAY",
span(actionButton('load_inputs', 'Load inputs'),
actionButton('save_inputs', 'Save inputs'),
style = "position:absolute;right:2em;")
)
),
windowTitle = "NHL Play-by-Play"
),
hr(),
fluidRow()
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
runApp(list(
ui = shinyUI(fluidPage(
fluidRow(align="bottom",
column(12, align="bottom",
h4("Download Options:"),
fluidRow(align="bottom",
column(6, selectizeInput("plot_dl", "File Type", width="100%",
choices = list("PDF"="pdf","PNG"="png"))),
column(3, downloadButton('plot1_dl', 'Left Plot')),
column(3, downloadButton('plot2_dl', 'Right Plot'))
)
)
),
tags$style(type='text/css', "#plot1_dl { width:100%; vertical-align:bottom}"),
tags$style(type='text/css', "#plot2_dl { width:100%;}")
)),
server = function(input, output) {
}
))
library(shiny)
runApp(list(
ui = shinyUI(fluidPage(
h4("Download Options:"),
fluidRow(
column(6, selectizeInput("plot_dl", "File Type", width="100%",
choices = list("PDF"="pdf","PNG"="png"))),
column(3, downloadButton('plot1_dl', 'Left Plot')),
column(3, downloadButton('plot2_dl', 'Right Plot'))
),
tags$style(type='text/css', "#plot1_dl { width:100%; margin-top: 25px;}"),
tags$style(type='text/css', "#plot2_dl { width:100%; margin-top: 25px;}")
)),
server = function(input, output) {
}
))
library(shiny)
runApp(list(
ui = shinyUI(fluidPage(
#h4("Download Options:"),
fluidRow(
h4("Download Options:"),
column(6, selectizeInput("plot_dl", "File Type", width="100%",
choices = list("PDF"="pdf","PNG"="png"))),
column(3, downloadButton('plot1_dl', 'Left Plot')),
column(3, downloadButton('plot2_dl', 'Right Plot'))
),
tags$style(type='text/css', "#plot1_dl { width:100%; margin-top: 25px;}"),
tags$style(type='text/css', "#plot2_dl { width:100%; margin-top: 25px;}")
)),
server = function(input, output) {
}
))
library(shiny)
runApp(list(
ui = shinyUI(fluidPage(
#h4("Download Options:"),
fluidRow(
h4("Download Options:"),
column(6, selectizeInput("plot_dl", "File Type", width="100%",
choices = list("PDF"="pdf","PNG"="png"))),
column(3, downloadButton('plot1_dl', 'Left Plot')),
column(3, downloadButton('plot2_dl', 'Right Plot'))
),
tags$style(type='text/css', "#plot1_dl { width:100%; margin-top: 25px;}"),
tags$style(type='text/css', "#plot2_dl { width:100%; margin-top: 25px;}")
)),
server = function(input, output) {
}
))
runApp(list(
ui = shinyUI(fluidPage(
#h4("Download Options:"),
fluidRow(
h4("Download Options:"),
column(6, selectizeInput("plot_dl", "File Type", width="100%",
choices = list("PDF"="pdf","PNG"="png"))),
column(3, downloadButton('plot1_dl', 'Left Plot')),
column(3, downloadButton('plot2_dl', 'Right Plot'))
),
tags$style(type='text/css', "#plot1_dl { width:100%; margin-top: 25px;}"),
tags$style(type='text/css', "#plot2_dl { width:100%; margin-top: 25px;}")
)),
server = function(input, output) {
}
))
library(shiny)
runApp(list(
ui = shinyUI(fluidPage(
#h4("Download Options:"),
fluidRow(
h4("Download Options:"),
column(6, selectizeInput("plot_dl", "File Type", width="100%",
choices = list("PDF"="pdf","PNG"="png"))),
column(3, downloadButton('plot1_dl', 'Left Plot')),
column(3, downloadButton('plot2_dl', 'Right Plot'))
),
tags$style(type='text/css', "#plot1_dl { width:100%; margin-top: 25px;}"),
tags$style(type='text/css', "#plot2_dl { width:100%; margin-top: 25px;}")
)),
server = function(input, output) {
}
))
install.packages("visNetwork")
shiny::runApp('OneDrive - UT Health San Antonio/DepLink/DepLink/Test_tab1')
runApp('OneDrive - UT Health San Antonio/DepLink/DepLink/Test_tab1')
shiny::runApp('OneDrive - UT Health San Antonio/DepLink/DepLink/Test_tab1')
shiny::runApp('Desktop/Test_tab1')
library(shiny); runApp('Desktop/DepLink/Tab1.R')
runApp('Desktop/DepLink/Tab1.R')
runApp('Desktop/DepLink/Tab2.R')
runApp('Desktop/DepLink/Tab2.R')
runApp('Desktop/DepLink/Tab2.R')
runApp('Desktop/DepLink/Tab2.R')
library(shiny); runApp('Desktop/DepLink/Tab2.R')
View(DepLink_MultiGenes)
View(DepLink_MultiGenes)
library(shiny)
library(DT)
library(dplyr)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
),
# Show a plot of the generated distribution
mainPanel(
DTOutput("dt")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$dt <- renderDT({
datatable(cars/10,options = list(
rowCallback = JS(
"function(row, data) {",
"for (i = 1; i < data.length; i++) {",
"if (data[i]>1000 | data[i]<1){",
"$('td:eq('+i+')', row).html(data[i].toExponential(1));",
"}",
"}",
"}")
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(DT)
library(dplyr)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
),
# Show a plot of the generated distribution
mainPanel(
DTOutput("dt"),
DTOutput("dt2")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$dt <- renderDT({
datatable(cars/10,options = list(
rowCallback = JS(
"function(row, data) {",
"for (i = 1; i < data.length; i++) {",
"if (data[i]>1000 | data[i]<1){",
"$('td:eq('+i+')', row).html(data[i].toExponential(1));",
"}",
"}",
"}")
)
)
})
output$dt2 <- renderDT({output$dt <- renderDT({
datatable(cars/10)})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(DT)
library(dplyr)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
),
# Show a plot of the generated distribution
mainPanel(
DTOutput("dt"),
DTOutput("dt2")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$dt <- renderDT({
datatable(cars/10,options = list(
rowCallback = JS(
"function(row, data) {",
"for (i = 1; i < data.length; i++) {",
"if (data[i]>1000 | data[i]<1){",
"$('td:eq('+i+')', row).html(data[i].toExponential(1));",
"}",
"}",
"}")
)
)
})
output$dt2 <- renderDT({
datatable(cars/10)})
}
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop/Test_all')
shiny::runApp('Desktop/Test_all')
shiny::runApp('Desktop/DepLink')
runApp()
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
runApp()
runApp('Desktop/DepLink')
runApp('Desktop/DepLink')
setwd("~/Desktop/DepLink//")
load("data/Tab3/DrugSearchTable_prism_gdsc.rdata")
load("data/GDSC_2019/gdsc_data_info.rdata")
a <- range(gdsc(,"BRD-K51313569"))
a <- range(gdsc_IC50(,"BRD-K51313569"))
a <- range(gdsc_IC50[],"BRD-K51313569"])
a <- range(gdsc_IC50[,"BRD-K51313569"])
a
gdsc_IC50[1:5,1:5]
gdsc_IC50[, which(gdsc_IC50_header == "BRD-K51313569")]
range(gdsc_IC50[, which(gdsc_IC50_header == "BRD-K51313569")])
max(gdsc_IC50[, which(gdsc_IC50_header == "BRD-K51313569")])
range(gdsc_IC50[, which(gdsc_IC50_header == "BRD-K51313569")][!is.na(gdsc_IC50[, which(gdsc_IC50_header == "BRD-K51313569")])])
a <-
gdsc_IC50[, which(gdsc_IC50_header == "BRD-K51313569")]
a[!is.na(a)]
sort(a[!is.na(a)])
range(a[!is.na(a)])
class(a[!is.na(a)])
sum(gdsc_IC50 == 0)
sum(gdsc_IC50[,1] == 0)
sum(gdsc_IC50[1,] == 0)
View(gdsc_IC50)
sum(gdsc_IC50$`BRD-K70401845` == 0)
gdsc_IC50[1,] == 0
sum(gdsc_IC50[1,] == 0)
sum(a[!is.na(a)] == 0)
sum(gdsc_IC50[1,] == gdsc_IC50[1,1])
a <- apply(gdsc_IC50,MARGIN = 2,FUN = is.na)
a
sum(a)
View(a)
a <- apply(gdsc_IC50,MARGIN = 2,FUN = ==0 )
b <- function(b){
b = b[!is.na(b)]
sum(b == 0)
}
a <- apply(gdsc_IC50,MARGIN = 2,FUN = b )
View(drugsearch.matrix)
a
a[which(a>0)]
gdsc_IC50.1 <- log10(gdsc_IC50)
View(gdsc_IC50.1)
gdsc_IC50 <- log10(gdsc_IC50)
save(gdsc_IC50,gdsc_AUC,gdsc_info,gdsc_IC50_header,file = "data/GDSC_2019/gdsc_data_info.rdata")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
